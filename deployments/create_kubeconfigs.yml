- hosts: localhost
  become: true
  become_user: ubuntu
  gather_facts: true

  vars:
    cert_location: "/home/ubuntu/certs"
    cert_remote_location: "/home/ubuntu"
  vars_files:
    - ./env.yaml

  tasks:

    - name: Setting KUBERNETES_ADDRESS as fact
      set_fact: KUBERNETES_ADDRESS="{{ controller_api_server_lb_private_ip }}"

    - name: Generate a kubelet kubeconfig for each worker node
      shell: |
        cd "{{ cert_location }}" && 
        for instance in worker1 worker2; do
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=${instance}.kubeconfig
          kubectl config set-credentials system:node:${instance} \
            --client-certificate=${instance}.pem \
            --client-key=${instance}-key.pem \
            --embed-certs=true \
            --kubeconfig=${instance}.kubeconfig
          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:node:${instance} \
            --kubeconfig=${instance}.kubeconfig

          kubectl config use-context default --kubeconfig=${instance}.kubeconfig
        done


    - name: Generate a kube-proxy kubeconfig
      shell: |
        cd "{{ cert_location }}" && 
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=kube-proxy.kubeconfig
          kubectl config set-credentials system:kube-proxy \
            --client-certificate=kube-proxy.pem \
            --client-key=kube-proxy-key.pem \
            --embed-certs=true \
            --kubeconfig=kube-proxy.kubeconfig
          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-proxy \
            --kubeconfig=kube-proxy.kubeconfig

          kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
        }

    - name: Generate a kube-controller-manager kubeconfig
      shell: |
        cd "{{ cert_location }}" && 
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://127.0.0.1:6443 \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config set-credentials system:kube-controller-manager \
            --client-certificate=kube-controller-manager.pem \
            --client-key=kube-controller-manager-key.pem \
            --embed-certs=true \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-controller-manager \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
        }

    - name: Generate a kube-scheduler kubeconfig
      shell: |
        cd "{{ cert_location }}" && 
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://127.0.0.1:6443 \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config set-credentials system:kube-scheduler \
            --client-certificate=kube-scheduler.pem \
            --client-key=kube-scheduler-key.pem \
            --embed-certs=true \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-scheduler \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
        }

    - name: Generate an admin kubeconfig
      shell: |
        cd "{{ cert_location }}" &&  
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://127.0.0.1:6443 \
            --kubeconfig=admin.kubeconfig

          kubectl config set-credentials admin \
            --client-certificate=admin.pem \
            --client-key=admin-key.pem \
            --embed-certs=true \
            --kubeconfig=admin.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=admin \
            --kubeconfig=admin.kubeconfig

          kubectl config use-context default --kubeconfig=admin.kubeconfig
        }


    - name: Generate the Kubernetes Data encrpytion config file containing the encrpytion key
      shell: |
        cd "{{ cert_location }}" && 
        ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)

        cat > encryption-config.yaml << EOF
        kind: EncryptionConfig
        apiVersion: v1
        resources:
          - resources:
              - secrets
            providers:
              - aescbc:
                  keys:
                    - name: key1
                      secret: ${ENCRYPTION_KEY}
              - identity: {}
        EOF