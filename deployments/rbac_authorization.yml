- hosts: controllers[0]
  become: true
  become_user: root
  gather_facts: true

  vars:
    config_dir: "/etc/kubernetes/config"
    cert_remote_location: "/home/ubuntu"
  vars_files:
    - ./env.yaml

  tasks:

    - name: Create a role with the necessary permissions
      shell: |
        cat << EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          annotations:
            rbac.authorization.kubernetes.io/autoupdate: "true"
          labels:
            kubernetes.io/bootstrapping: rbac-defaults
          name: system:kube-apiserver-to-kubelet
        rules:
          - apiGroups:
              - ""
            resources:
              - nodes/proxy
              - nodes/stats
              - nodes/log
              - nodes/spec
              - nodes/metrics
            verbs:
              - "*"
        EOF
      register: role

    - name: Bind the role to the kubernetes user
      shell: |
        cat << EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: system:kube-apiserver
          namespace: ""
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:kube-apiserver-to-kubelet
        subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: kubernetes
        EOF
      register: rolebinding

    - name: Show result
      debug:
        msg:
         - "{{ role.stdout_lines }}"
         - "{{ rolebinding.stdout_lines }}"