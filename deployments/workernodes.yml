- hosts: workers
  become_user: ubuntu
  serial: 1
  become: true
  gather_facts: true

  vars:
    config_dir: "/etc/kubernetes/config"
    cert_remote_location: "/home/ubuntu"
    RELEASE: "v1.23.9"    
  vars_files:
    - ./env.yaml

  tasks:
    - name: Setting HOSTNAME as fact
      set_fact:
        HOSTNAME: "{{ 'worker1' if inventory_hostname == 'worker1' else 'worker2' if inventory_hostname == 'worker2' else 'UNKNOWN' }}"

    - name: Prints HOSTNAME variable set
      debug:
        msg:
        - "This machine HOSTNAME is: '{{ HOSTNAME }}'"   

    - name: Create Workaround for CoreDNS if Ubuntu 16 - ideally use Ubuntu 18
      shell: |
        sudo mkdir -p /run/systemd/resolve
        sudo ln -s /run/resolvconf/resolv.conf /run/systemd/resolve/resolv.conf
      when: ansible_distribution_major_version == "16"

    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - socat
        - conntrack
        - ipset
      become: true
      become_user: root        

    - name: Download and install the worker binaries to each worker node
      get_url:
        url: "{{ item }}"
        dest: /usr/local/bin/
        mode: a+x
      loop:
        - https://storage.googleapis.com/gvisor/releases/release/latest/x86_64/runsc 
        - https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
        - https://storage.googleapis.com/kubernetes-release/release/{{ RELEASE }}/bin/linux/amd64/kubectl
        - https://storage.googleapis.com/kubernetes-release/release/{{ RELEASE }}/bin/linux/amd64/kube-proxy
        - https://storage.googleapis.com/kubernetes-release/release/{{ RELEASE }}/bin/linux/amd64/kubelet
      become: true
      become_user: root    

    - name: create config dir if it doesn't exist
      shell: sudo mkdir -p "{{ item }}"
      loop:
        - /var/lib/kubernetes/
        - /etc/cni/net.d
        - /opt/cni/bin 
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/run/kubernetes

    - name: Download and install the worker binaries archive to each worker node
      get_url:
        url: "{{ item }}"
        dest: "{{ artifacts_location }}"
      loop:
        - https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.22.1/crictl-v1.22.1-linux-amd64.tar.gz
        - https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
        - https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-amd64.tar.gz

    - name: Extract crictl-v1.22.1-linux-amd64.tar.gz into /usr/local/bin/
      unarchive:
        src: "{{ artifacts_location }}/crictl-v1.22.1-linux-amd64.tar.gz"
        dest: /usr/local/bin/
        remote_src: yes
      become: true
      become_user: root    

    - name: Make crictl executable
      shell: sudo chmod +x /usr/local/bin/crictl

    - name: Extract cni-plugins-linux-amd64-v1.1.1.tgz into /opt/cni/bin/
      shell: "sudo tar -xvzf {{ artifacts_location }}/cni-plugins-linux-amd64-v1.1.1.tgz  -C /opt/cni/bin/"

    - name: Create temp containerd folder
      shell: mkdir -p /tmp/containerd/

    - name: Extract containerd-1.6.8-linux-amd64.tar.gz  into /tmp/containerd
      unarchive:
        src: "{{ artifacts_location }}/containerd-1.6.8-linux-amd64.tar.gz"
        dest: /tmp/containerd/
        remote_src: yes

    - name: Move containerd to bin
      shell: sudo mv -v /tmp/containerd/bin/* /bin/ 

    - name: Move runc.amd64 to runc
      shell: sudo mv -v /usr/local/bin/runc.amd64 /usr/local/bin/runc

    - name: Create containerd folder
      shell: sudo mkdir -p /etc/containerd/

    - name: Create the containerd config.toml
      shell: |
        cat << EOF | sudo tee /etc/containerd/config.toml
        [plugins]
          [plugins.cri.containerd]
            snapshotter = "overlayfs"
            [plugins.cri.containerd.default_runtime]
              runtime_type = "io.containerd.runtime.v1.linux"
              runtime_engine = "/usr/local/bin/runc"
              runtime_root = ""
            [plugins.cri.containerd.untrusted_workload_runtime]
              runtime_type = "io.containerd.runtime.v1.linux"
              runtime_engine = "/usr/local/bin/runsc"
              runtime_root = "/run/containerd/runsc"
        EOF
      become: true
      become_user: root    

    - name: Create the containerd unit file
      shell: |
        cat <<EOF | sudo tee /etc/systemd/system/containerd.service
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target

        [Service]
        ExecStartPre=/sbin/modprobe overlay
        ExecStart=/bin/containerd
        Restart=always
        RestartSec=5
        Delegate=yes
        KillMode=process
        OOMScoreAdjust=-999
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      become: true
      become_user: root    

    - name: Copy {{ HOSTNAME }}-key.pem to /var/lib/kubelet/
      copy: 
        src: "{{ cert_remote_location }}/"
        dest: /var/lib/kubelet/
        remote_src: yes
      become: true
      become_user: root    


    - name: Copy {{ HOSTNAME }}.pem to /var/lib/kubelet/
      copy: 
        src: "{{ cert_remote_location }}/"
        dest: /var/lib/kubelet/
        remote_src: yes
      become: true
      become_user: root            

    - name: Copy kubeconfig to /var/lib/kubeconfig
      copy: 
        src: "{{ cert_remote_location }}/{{ HOSTNAME }}.kubeconfig"
        dest: /var/lib/kubelet/kubeconfig
        remote_src: yes
      become: true
      become_user: root            

    - name: Copy kube-proxy.kubeconfig to /var/lib/kube-proxy/kubeconfig
      copy: 
        src: "{{ cert_remote_location }}/kube-proxy.kubeconfig"
        dest: /var/lib/kube-proxy/kubeconfig
        remote_src: yes 
      become: true
      become_user: root                 

    - name: Copy ca.pem to /var/lib/kubernetes/
      copy: 
        src: "{{ cert_remote_location }}/ca.pem"
        dest: /var/lib/kubernetes/
        remote_src: yes 
      become: true
      become_user: root                 

    - name: Create the kubelet config file
      shell: |
        cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          anonymous:
            enabled: false
          webhook:
            enabled: true
          x509:
            clientCAFile: "/var/lib/kubernetes/ca.pem"
        authorization:
          mode: Webhook
        clusterDomain: "cluster.local"
        clusterDNS:
          - "10.32.0.10"
        #podCIDR: "{{ POD_CIDR }}"
        #resolvConf: "/run/systemd/resolve/resolv.conf"
        runtimeRequestTimeout: "15m"
        tlsCertFile: "/var/lib/kubelet/{{ HOSTNAME }}.pem"
        tlsPrivateKeyFile: "/var/lib/kubelet/{{ HOSTNAME }}-key.pem"
        EOF
      become: true
      become_user: root            

    - name: Delete existing config files if they exist
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/etc/systemd/system/kubelet.service"
        - "/etc/systemd/system/kube-proxy.service"
      become: true
      become_user: root            

    - name: Create the kubelet unit file
      shell: |
        cat << EOF | sudo tee /etc/systemd/system/kubelet.service
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=containerd.service
        Requires=containerd.service

        [Service]
        ExecStart=/usr/local/bin/kubelet \\
          --config=/var/lib/kubelet/kubelet-config.yaml \\
          --container-runtime=remote \\
          --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
          --image-pull-progress-deadline=2m \\
          --kubeconfig=/var/lib/kubelet/kubeconfig \\
          --network-plugin=cni \\
          --register-node=true \\
          --v=2 \\
          --hostname-override={{ HOSTNAME }}
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
      become: true
      become_user: root            

    - name: Create the kube-proxy config file
      shell: |
        cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
        kind: KubeProxyConfiguration
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: "/var/lib/kube-proxy/kubeconfig"
        mode: "iptables"
        clusterCIDR: "10.200.0.0/16"
        EOF
      become: true
      become_user: root            

    - name: Create the kube-proxy unit file
      shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
        [Unit]
        Description=Kubernetes Kube Proxy
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-proxy \\
          --config=/var/lib/kube-proxy/kube-proxy-config.yaml \\
          --hostname-override={{ HOSTNAME }}
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
      become: true
      become_user: root            

    - name: Install, configure, and start API server components
      block:
        - name: Reload the all services
          shell: systemctl daemon-reload

        - name: Enable services, in all cases
          service:
            name: "{{ item }}"
            enabled: yes 
          loop:
            - containerd
            - kubelet
            - kube-proxy

        - name: Restart service kubelet, in all cases
          service:
            name: "{{ item }}"
            state: restarted  
          loop:
            - containerd
            - kubelet
            - kube-proxy

        - name: Start service all services, if not started
          service:
            name: "{{ item }}"
            state: started   
          loop:
            - containerd
            - kubelet
            - kube-proxy
      become: true
      become_user: root              

    - name: Check all the services are active (running)
      shell: sudo systemctl status containerd kubelet kube-proxy
      register: services_result
      no_log: True

    - name: Show service results 
      debug:
        msg:
        - "{{ services_result.stdout_lines }}" 


- hosts: controllers [0]
  become: true
  become_user: ubuntu
  gather_facts: false

  vars:
    cert_location: "/home/ec2-user/certs"
    cert_remote_location: "/home/ubuntu"
  vars_files:
    - ./env.yaml

  tasks:
    - pause:
        seconds: 45

    - name: Use kubectl to get nodes on one controller
      shell: kubectl get nodes --kubeconfig admin.kubeconfig
      register: nodes
      no_log: True

    - name: Show nodes results from one Controller
      debug:
        msg:
        - "{{ nodes.stdout_lines }}"  